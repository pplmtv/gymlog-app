name: deploy

on:
  push:
    branches:
      - main
      - feature/create_new

env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}
  SYSTEM_NAME: gymlog-sys
  SERVICE_NAME: gymlog-app

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Configure aws credentials for prod
        # if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - name: Set env vars for prod
        # if: github.ref == 'refs/heads/main'

        run: echo "ENV_NAME=prod" >> $GITHUB_ENV
        # run: |
        #   echo "ENV_NAME=prod" >> $GITHUB_ENV
        #   echo "VPC_CIDR=172.41.0.0/16" >> $GITHUB_ENV

      - uses: actions/checkout@v2
       
      - run: docker-compose up -d --build app web

      - uses: aws-actions/amazon-ecr-login@v1
        id: amazon-ecr-login

      # - name: Push app image to ecr
      #   env:
      #     DOCKER_BUILDKIT: 1
      #     ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
      #     ECR_REPOSITRY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-app
      #   run: |
      #     docker build \
      #       --cache-from=$ECR_REGISTRY/$ECR_REPOSITRY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
      #       -f infra/docker/app/Dockerfile \
      #       -t $ECR_REGISTRY/$ECR_REPOSITRY:latest \
      #       -t $ECR_REGISTRY/$ECR_REPOSITRY:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/$ECR_REPOSITRY:latest
      #     docker push $ECR_REGISTRY/$ECR_REPOSITRY:$IMAGE_TAG

      # - name: Push web image to ecr
      #   env:
      #     DOCKER_BUILDKIT: 1
      #     ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-web
      #   run: |
      #     docker build \
      #       --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
      #       -f infra/docker/web/Dockerfile \
      #       -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
      #       -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
